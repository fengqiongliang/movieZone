package com.pxe.iscsi;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.RandomAccessFile;

import org.apache.commons.io.FileUtils;
import org.aspectj.util.FileUtil;

import com.moviezone.util.ByteUtil;
import com.pxe.iscsi.cdb16.Write10;
import com.pxe.iscsi.pdu.BasicHeaderSegment;
import com.pxe.iscsi.pdu.SCSICommand;

public class StorageManager {
	public static int BlockSize = 512;
	private File file = new File("E:\\iso系统\\iscsi_xp - 副本.img");
	private RandomAccessFile randomAccessFile;
	public StorageManager(){
		try{randomAccessFile = new RandomAccessFile(file,"rws");}catch(Exception ex){}
	}
	public int readLBA(){
		return (int)(file.length()/BlockSize-1);  
	}
	public int readNumBlock(){
		return (int)(file.length()/BlockSize);
	}
	public int read(long storageIndex,byte[] bytes,int length) throws IOException{
		 randomAccessFile.seek(storageIndex);
	     return randomAccessFile.read(bytes, 0, length);
	}
	public void write(long storageIndex,byte[] bytes,int length) throws IOException{
		randomAccessFile.seek(storageIndex);
		randomAccessFile.write(bytes, 0, length);
	}
	public int read(long storageIndex,byte[] bytes) throws IOException{
		return read(storageIndex,bytes,bytes.length);
	}
	public void write(long storageIndex,byte[] bytes) throws IOException{
		write(storageIndex,bytes,bytes.length);
	}
	public static void main(String[] args) throws Exception{
		//test();
		
		File file = new File("D:\\测试iscsi\\winxp.img");
		FileOutputStream fos = new FileOutputStream(file,true);
		for(long i=0;i<1024*1024*2;i++){
			fos.write(new byte[1024]);
		}
		fos.close();
		/*
		
		byte[] a = ByteUtil.toByte("01a10000000080000000000000000000000000cb00008000000000cb000000ba2a00003ffddb000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
		System.out.println("detected error size!!!! shouldSize : 32816 actualSize : 1460 Data = 01a10000000080000000000000000000000000cb00008000000000cb000000ba2a00003ffddb
		System.out.println(a.length+ " --> 1460");
		test();
		*/
	} 
	
	private static void test() throws Exception{
		File file = new File("D:\\测试iscsi\\write");
		byte[] b = FileUtil.readAsByteArray(file);
		for(byte t:b){
			System.out.print(ByteUtil.toHex(new byte[]{t}));
		}
		String s = ByteUtil.toHex(b);
		System.out.println();
		/*
		byte[] b = ByteUtil.toByte("01a10000000080000000000000000000000000cb00008000000000cb000000ba2a00003ffddb000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
		byte[] BHS = new byte[48];
		System.arraycopy(b, 0, BHS, 0, BHS.length);
		BasicHeaderSegment basicHead = new BasicHeaderSegment(BHS);
		System.out.println(basicHead);
		byte[] AHS = new byte[basicHead.getTotalAHSLength()];
		byte[] HeaderDigest = new byte[0];
		byte[] DataSegment = new byte[basicHead.getDataSegmentLength()];
		byte[] DataDigest = new byte[0];
		byte[] dataSegmentPadding = new byte[DataSegment.length % 4== 0 ? 0:(4 - DataSegment.length % 4)];
		int totalSize = BHS.length+AHS.length+HeaderDigest.length+DataSegment.length+dataSegmentPadding.length;
		System.arraycopy(b, 48, AHS, 0, AHS.length);
		System.arraycopy(b, 48+AHS.length, HeaderDigest, 0, HeaderDigest.length);
		System.arraycopy(b, (48+AHS.length+HeaderDigest.length), DataSegment, 0, b.length-(48+AHS.length+HeaderDigest.length));
		SCSICommand scsiCommand = new SCSICommand(BHS,DataSegment);
		System.out.println(scsiCommand);
		Write10 command = new Write10(scsiCommand.getCDB());
		System.out.println(command);
		System.out.println(64*512);
		*/
	}
}
